count(diamonds$volume==0)
detach("package:plyr", unload=TRUE)
?cor.test
d <-subset(diamonds, volume!=0 & price<800)
cor.test(d$volume,d$price)
d <-subset(diamonds, volume!=0 & volume<800)
cor.test(d$volume,d$price)
ggplot(data = d, aes(x = volume, y = price)) +
geom_point(alpha=0.05)
ggplot(data = d, aes(x = volume, y = price)) +
geom_point(alpha=0.05)+
geom_smooth(linear)
ggplot(data = d, aes(x = volume, y = price)) +
geom_point(alpha=0.05)+
geom_smooth(method = "lm", formula = y ~ x, size = 1)
6.68*10^-4*9.5
300/14
768/3
887.70+903.45+878.40+840.4+903.45+903.45+871.92+871.92+840.4+840.4+840.4+840.4+840.4
871.92+871.92+919.2+934.96+919.2+871.92+966.48+871.92+903.45+919.2+919.2+871.92+919.2
13*85
3500/30
5*85
x<-1:12y<-1:12plot(x,y)
x<-1:12;y<-1:12plot(x,y)
x<-1:12
y<-1:12
plot(x,y)
)
abline(v=10 )
abline(h=10 )
barplot(x)
barplot(y)
barplot(c(x,y))
?c
barplot(cbind(x,y))
barplot(rbind(x,y))
rbind(x,y)
WorldPhones
list.files()
library(seqinr)
list.files()
plot(x,y)
swirl()
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
exit
exit()
q()
600000*10^6*10^-9*4
600000*10^4*10^-9*4
setwd("~/Dropbox/Dwayne/ralignmentdata")
library(seqinr)
read.fasta("SRR1648694.txt") -> Pat1_fasta
read.fasta("Reference_RT_HIV1.txt") -> RT_ref
library(BioStrings)
install.packages("BioStrings")
source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite("BioStrings")
biocLite("Biostrings")
library(BioStrings)
library(Biostrings)
pairwiseAlignment(RT_ref[[1]], Pat1_fasta[[1]], substitutionMatrix = "BLOSUM50", gapOpening = -2, gapExtension = -8, scoreOnly = FALSE)
RT_ref[[1]]
paste(RT_ref[[1]],collapse="")
pairwiseAlignment(paste(RT_ref[[1]],collapse=""), paste(Pat1_fasta[[1]],collapse=""), substitutionMatrix = "BLOSUM50", gapOpening = -2, gapExtension = -8, scoreOnly = FALSE)
?pairwiseAlignment
pairwiseAlignment(paste(RT_ref[[1]],collapse=""), paste(Pat1_fasta[[1]],collapse=""), type = "global",
#substitutionMatrix = "BLOSUM50",
gapOpening = -2, gapExtension = -8, scoreOnly = FALSE)
pairwiseAlignment(paste(RT_ref[[1]],collapse=""), paste(Pat1_fasta[[1]],collapse=""), type = "global",
#substitutionMatrix = "BLOSUM50",
gapOpening = -2, gapExtension = -8, scoreOnly = FALSE) -> X
Align1<-pairwiseAlignment(paste(RT_ref[[1]],collapse=""), paste(Pat1_fasta[[1]],collapse=""), type = "global",
#substitutionMatrix = "BLOSUM50",
gapOpening = -2, gapExtension = -8, scoreOnly = FALSE)
writePairwiseAlignments(Align1, file="Align1.txt", Matrix=NA, block.width=50)
Align1<-pairwiseAlignment(paste(RT_ref[[1]],collapse=""), paste(Pat1_fasta[[1]],collapse=""), type = "global",
#substitutionMatrix = "BLOSUM50",
gapOpening = -10, gapExtension = -8, scoreOnly = FALSE)
writePairwiseAlignments(Align1, file="Align1.txt", Matrix=NA, block.width=50)
setwd("~/Dropbox/MarionKristofBachelerProject/GitMarionKristof/bachelerProject/Rscripts")
source('./baseRscript.R')
if (TRUE){#read the stored data
read.table("../Output/freqPatTsInclDay0-threshold.csv",sep=",",header=TRUE,row.names=1)->freqPatTs
}
attach(freqPatTs); colMeansTs<-apply(freqPatTs, 2 , mean, na.rm=TRUE)
btmeansTs<-data.frame(row.names=names(freqPatTs)[1:984]) #each row is a site, each column is a bootstrapped mean
numbootstraps=1000
for (j in 1:984){# start with the first site
print(j)
for (k in 1:numbootstraps){ # first iteration
btmeansTs[j,k]=mean(sample(freqPatTs[,j],length(freqPatTs[,j]),replace = TRUE),na.rm=TRUE)
}}
OverviewDF<-data.frame(num=1:984,colMeansTs,TypeOfSite)
OverviewDFOrderedByFreq <- OverviewDF[order(colMeansTs),]
OverviewDFOrderedByFreq$color<-""
for (i in 1:984){
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="syn") OverviewDFOrderedByFreq$color[i] = "green"
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="nonsyn") OverviewDFOrderedByFreq$color[i] = "red"
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="stop") OverviewDFOrderedByFreq$color[i] = "black"
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="res") OverviewDFOrderedByFreq$color[i] = "purple"
}
freqPatTs<-round(freqPatTs,2)
PROdata<-OverviewDFOrderedByFreq[OverviewDFOrderedByFreq$num<298,]
#remove resistance mutations
PROdata<-PROdata[PROdata$TypeOfSite!="res",]
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=2, pch = "|",col=PROdata$color)
#arrows(1:length(PROdata$num), PROdata$lowerConf +0.001, 1:length(PROdata$num), PROdata$upperConf +0.001,
#       angle=90, length=0.01, code=3, col=PROdata$color,lwd=0.1)
RTdata<-OverviewDFOrderedByFreq[OverviewDFOrderedByFreq$num>=298,]
RTdata<-RTdata[RTdata$TypeOfSite!="res",]
plot(RTdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=1, pch = "|",col=RTdata$color)
#arrows(1:length(RTdata$num), RTdata$lowerConf +0.001, 1:length(RTdata$num), RTdata$upperConf +0.001,
#       angle=90, length=0.01, code=3, col=RTdata$color,lwd=0.1)
translatedB<-translate(consensusB)
#convert the fasta files into AA sequences
translatedfasta<-c()
for (i in 1:length(listfastafiles)){ #for each fastafile
filename=paste("../Data/BachelerFiles/FASTAfiles/",substr(listfastafiles[i],1,6),".fasta",sep="")
patfasta<-read.dna(filename, format = "fasta",as.character=TRUE) #read the file
translatedfasta<-rbind(translatedfasta,t(apply(patfasta,1,function(x) translate(x))))
}
consensusB
library(seqinr)
translatedB<-translate(consensusB)
seqinr::translate(consensusB)
?translate
translatedB<-seqinr::translate(consensusB)
translatedfasta<-c()
for (i in 1:length(listfastafiles)){ #for each fastafile
filename=paste("../Data/BachelerFiles/FASTAfiles/",substr(listfastafiles[i],1,6),".fasta",sep="")
patfasta<-read.dna(filename, format = "fasta",as.character=TRUE) #read the file
translatedfasta<-rbind(translatedfasta,t(apply(patfasta,1,function(x) translate(x))))
}
list.files(path="../FASTAfiles/")->listfastafiles
for (i in 1:length(listfastafiles)){ #for each fastafile
filename=paste("../Data/BachelerFiles/FASTAfiles/",substr(listfastafiles[i],1,6),".fasta",sep="")
patfasta<-read.dna(filename, format = "fasta",as.character=TRUE) #read the file
translatedfasta<-rbind(translatedfasta,t(apply(patfasta,1,function(x) translate(x))))
}
listfastafiles[1]
list.files(path="../FASTAfiles/")
list.files(path="../Data/BachelerFiles/FASTAfiles/)
list.files(path="../Data/BachelerFiles/FASTAfiles/")
list.files(path="../Data/BachelerFiles/FASTAfiles/")->listfastafiles
for (i in 1:length(listfastafiles)){ #for each fastafile
filename=paste("../Data/BachelerFiles/FASTAfiles/",substr(listfastafiles[i],1,6),".fasta",sep="")
patfasta<-read.dna(filename, format = "fasta",as.character=TRUE) #read the file
translatedfasta<-rbind(translatedfasta,t(apply(patfasta,1,function(x) translate(x))))
}
filename=paste("../Data/BachelerFiles/FASTAfiles/",substr(listfastafiles[i],1,6),".fasta",sep="")
patfasta<-read.dna(filename, format = "fasta",as.character=TRUE) #read the file
translatedfasta<-rbind(translatedfasta,t(apply(patfasta,1,function(x) seqinr::translate(x))))
for (i in 1:length(listfastafiles)){ #for each fastafile
filename=paste("../Data/BachelerFiles/FASTAfiles/",substr(listfastafiles[i],1,6),".fasta",sep="")
patfasta<-read.dna(filename, format = "fasta",as.character=TRUE) #read the file
translatedfasta<-rbind(translatedfasta,t(apply(patfasta,1,function(x) seqinr::translate(x))))
}
#determine for each codon position, the frequency of mutations compared to subtype B
mutations<-c()
for(m in 1:length(translatedB)){
prevmut<-100-(length(which(translatedfasta[,m]==translatedB[m]))/nrow(translatedfasta)*100)
mutations<-c(mutations,prevmut)
}
plot(mutations[1:99],type='o',ylab='Mutation frequency (%)',xlab='AA position')
# Plot for RT including resistance positions
plot(mutations[ 100:328],type='o',ylab='Mutation frequency (%)',xlab='AA position',xaxt='n')
axis(1,(100:328)-99,label=(100:328)-99)
mutationposition<-cbind(1:229,mutations[100:328])
plot(mutationposition[-c(sort(RTImuts$pos)),1],mutationposition[-c(sort(RTImuts$pos)),2],type='o',ylab='Mutation frequency (%)',xlab='AA position',xaxt='n')
points(mutationposition[c(sort(RTImuts$pos)),1],mutationposition[c(sort(RTImuts$pos)),2],col='red')
axis(1,(100:328)-99,label=(100:328)-99)
```
PROdataNonSyn<-PROdata[PROdata$TypeOfSite=="nonsyn",]
#Make plot of Protease
plot(PROdataNonSyn$num[order(PROdataNonSyn$num)],PROdataNonSyn$colMeansTs[order(PROdataNonSyn$num)]+0.001,col=PROdataNonSyn$color[order(PROdataNonSyn$num)],pch=16,log="y",type="b")#,ylim=c(0,max(PROdataNonSyn$colMeansTs)))
#Add moving mean
for (i in 20:280){
range = (i-20):(i+20)
#    points(i, mean(PROdataNonSyn$colMeansTs[PROdataNonSyn$num%in%range]), col="blue",pch = 12, cex=3)
points(i, median(PROdataNonSyn$colMeansTs[PROdataNonSyn$num%in%range]), col="green",pch = 11, cex=3)
}
PROdataNonSyn<-PROdata[PROdata$TypeOfSite=="nonsyn",]
#Make plot of Protease
plot(PROdataNonSyn$num[order(PROdataNonSyn$num)],PROdataNonSyn$colMeansTs[order(PROdataNonSyn$num)]+0.001,col=PROdataNonSyn$color[order(PROdataNonSyn$num)],pch=16,log="y",type="b")#,ylim=c(0,max(PROdataNonSyn$colMeansTs)))
#Add moving mean
for (i in 20:280){
range = (i-20):(i+20)
#    points(i, mean(PROdataNonSyn$colMeansTs[PROdataNonSyn$num%in%range]), col="blue",pch = 12, cex=3)
points(i, median(PROdataNonSyn$colMeansTs[PROdataNonSyn$num%in%range]), col="green",pch = 11, cex=2)
}
PROdataSyn<-PROdata[PROdata$TypeOfSite=="syn",]
plot(PROdataSyn$num[order(PROdataSyn$num)],PROdataSyn$colMeansTs[order(PROdataSyn$num)]+0.001,col=PROdataSyn$color[order(PROdataSyn$num)],pch=16,log="y",type="b")#,ylim=c(0,max(PROdataNonSyn$colMeansTs)))
for (i in 20:280){
range = (i-20):(i+20)
points(i, median(PROdataSyn$colMeansTs[PROdataSyn$num%in%range]), col="green",pch = 11, cex=3)
}
82*3
PROdataSyn<-PROdata[PROdata$TypeOfSite=="syn",]
#Make plot of Protease
plot(PROdataSyn$num[order(PROdataSyn$num)],PROdataSyn$colMeansTs[order(PROdataSyn$num)]+0.001,col=PROdataSyn$color[order(PROdataSyn$num)],pch=16,log="y",type="b")#,ylim=c(0,max(PROdataNonSyn$colMeansTs)))
#Add moving mean
for (i in 20:280){
range = (i-10):(i+10)
points(i, median(PROdataSyn$colMeansTs[PROdataSyn$num%in%range]), col="blue",pch = 11, cex=2)
}
plot(PROdataSyn$num[order(PROdataSyn$num)],PROdataSyn$colMeansTs[order(PROdataSyn$num)]+0.001,col=PROdataSyn$color[order(PROdataSyn$num)],pch=16,log="y",type="b")#,ylim=c(0,max(PROdataNonSyn$colMeansTs)))
plot(PROdataSyn$num[order(PROdataSyn$num)],PROdataSyn$colMeansTs[order(PROdataSyn$num)]+0.001,col=PROdataSyn$color[order(PROdataSyn$num)],pch=16,
#log="y",
type="b")#,ylim=
plot(PROdataSyn$num[order(PROdataSyn$num)],PROdataSyn$colMeansTs[order(PROdataSyn$num)]+0.001,col=PROdataSyn$color[order(PROdataSyn$num)],pch=16,
log="y",
type="b")#,ylim=c(0,max(PROdataNonSyn$colMeansTs)))
RTdataSyn<-RTdata[RTdata$TypeOfSite=="syn",]
plot(RTdataSyn$num[order(RTdataSyn$num)],RTdataSyn$colMeansTs[order(RTdataSyn$num)]+0.001,col=RTdataSyn$color[order(RTdataSyn$num)],pch=16,
plot(RTdataSyn$num[order(RTdataSyn$num)],RTdataSyn$colMeansTs[order(RTdataSyn$num)]+0.001,col=RTdataSyn$color[order(RTdataSyn$num)],pch=16,
log="y",
type="b")#,ylim=c(0,max(RTdataNonSyn$colMeansTs)))
plot(RTdataSyn$num[order(RTdataSyn$num)],RTdataSyn$colMeansTs[order(RTdataSyn$num)]+0.001,col=RTdataSyn$color[order(RTdataSyn$num)],pch=16,
log="y",
type="b")#,yli
for (i in 20:280){
range = (i-10):(i+10)
points(i, median(RTdataSyn$colMeansTs[RTdataSyn$num%in%range]), col="blue",pch = 11, cex=2)
}
for (i in 370:900){
range = (i-10):(i+10)
points(i, median(RTdataSyn$colMeansTs[RTdataSyn$num%in%range]), col="blue",pch = 11, cex=2)
}
plot(RTdataSyn$num[order(RTdataSyn$num)],RTdataSyn$colMeansTs[order(RTdataSyn$num)]+0.001,col=RTdataSyn$color[order(RTdataSyn$num)],pch=16,
log="y",
type="b")#,ylim=c(0,max(RTdataNonSyn$colMeansTs)))
#Add moving mean
for (i in 370:900){
range = (i-1):(i+1)
points(i, median(RTdataSyn$colMeansTs[RTdataSyn$num%in%range]), col="blue",pch = 11, cex=2)
}
plot(RTdataSyn$num[order(RTdataSyn$num)],RTdataSyn$colMeansTs[order(RTdataSyn$num)]+0.001,col=RTdataSyn$color[order(RTdataSyn$num)],pch=16,
log="y",
type="b",
ylim = c(0.001,0.06)    )#,ylim=c(0,max(RTdataNonSyn$colMeansTs)))
for (i in 370:900){
range = (i-1):(i+1)
points(i, median(RTdataSyn$colMeansTs[RTdataSyn$num%in%range]), col="blue",pch = 11, cex=2)
}
plot(RTdataSyn$num[order(RTdataSyn$num)],RTdataSyn$colMeansTs[order(RTdataSyn$num)]+0.001,col=RTdataSyn$color[order(RTdataSyn$num)],pch=16,
log="y",
type="b",
ylim = c(0.001,0.06)    )#,ylim=c(0,max(RTdataNonSyn$colMeansTs)))
#Add moving mean
for (i in 370:900){
range = (i-0):(i+0)
points(i, median(RTdataSyn$colMeansTs[RTdataSyn$num%in%range]), col="blue",pch = 11, cex=2)
}
plot(RTdataSyn$num[order(RTdataSyn$num)],RTdataSyn$colMeansTs[order(RTdataSyn$num)]+0.001,col=RTdataSyn$color[order(RTdataSyn$num)],pch=16,
log="y",
type="b",
ylim = c(0.001,0.06)    )#,ylim=c(0,max(RTdataNonSyn$colMeansTs)))
#Add moving mean
for (i in 370:900){
range = (i-0):(i+0)
points(i, median(RTdataSyn$colMeansTs[RTdataSyn$num%in%range])+0.001, col="blue",pch = 11, cex=2)
}
plot(RTdataSyn$num[order(RTdataSyn$num)],RTdataSyn$colMeansTs[order(RTdataSyn$num)]+0.001,col=RTdataSyn$color[order(RTdataSyn$num)],pch=16,
log="y",
type="b",
ylim = c(0.001,0.06)    )#,ylim=c(0,max(RTdataNonSyn$colMeansTs)))
#Add moving mean
for (i in 370:900){
range = (i-10):(i+10)
points(i, median(RTdataSyn$colMeansTs[RTdataSyn$num%in%range])+0.001, col="blue",pch = 11, cex=2)
}
#Make plot of RTtease
plot(RTdataSyn$num[order(RTdataSyn$num)],RTdataSyn$colMeansTs[order(RTdataSyn$num)]+0.001,col=RTdataSyn$color[order(RTdataSyn$num)],pch=16,
log="y",
type="b",
ylim = c(0.001,0.06)    )#,ylim=c(0,max(RTdataNonSyn$colMeansTs)))
#Add moving mean
for (i in 370:900){
range = (i-5):(i+5)
points(i, median(RTdataSyn$colMeansTs[RTdataSyn$num%in%range])+0.001, col="blue",pch = 11, cex=2)
}
plot(RTdataSyn$num[order(RTdataSyn$num)],RTdataSyn$colMeansTs[order(RTdataSyn$num)]+0.001,col=RTdataSyn$color[order(RTdataSyn$num)],pch=16,
log="y",
type="b",
ylim = c(0.001,0.06)    )#,ylim=c(0,max(RTdataNonSyn$colMeansTs)))
#Add moving mean
for (i in 370:900){
range = (i-10):(i+10)
points(i, median(RTdataSyn$colMeansTs[RTdataSyn$num%in%range])+0.001, col="blue",pch = 11, cex=2)
}
plot(PROdataSyn$num[order(PROdataSyn$num)],PROdataSyn$colMeansTs[order(PROdataSyn$num)]+0.001,col=PROdataSyn$color[order(PROdataSyn$num)],pch=16,
log="y",
type="b")#,yli
lines(c(82*3,0.002),c(97*3,0.002))
lines(c(0.002,0.002),c(82*3,97*3))
lines(c(0.002,0.002),c(82*3,97*3))
lines(c(82*3,0.003),c(97*3,0.002))
lines(c(82*3,90),c(97*3,0.002))
lines(c(82*3,90),c(0.002,97*3))
lines(c(82*3,90),c(0.002,0.002))
lines(c(82*3,97*3),c(0.002,0.002))
lines(c(82*3,97*3),c(0.002,0.002),col=2,lwd=2)
plot(PROdataSyn$num[order(PROdataSyn$num)],PROdataSyn$colMeansTs[order(PROdataSyn$num)]+0.001,col=PROdataSyn$color[order(PROdataSyn$num)],pch=16,
log="y",
type="b")#,ylim=c(0,max(PROdataNonSyn$colMeansTs)))
lines(c(82*3,97*3),c(0.002,0.002),col=2,lwd=2)
lines(c(82*3,107*3),c(0.002,0.002),col=2,lwd=2)
lines(c(82*3,97*3),c(0.002,0.002),col=2,lwd=2)
PROdata[PROdata$TypeOfSite=="syn",]
cbind(PROdata[PROdata$TypeOfSite=="syn",],RTdata[RTdata$TypeOfSite=="syn",])
rbind(PROdata[PROdata$TypeOfSite=="syn",],RTdata[RTdata$TypeOfSite=="syn",])
AlldataSyn<-rbind(PROdata[PROdata$TypeOfSite=="syn",],RTdata[RTdata$TypeOfSite=="syn",])
AlldataSyn<-rbind(PROdata[PROdata$TypeOfSite=="syn",],RTdata[RTdata$TypeOfSite=="syn",])
plot(AlldataSyn$num[order(AlldataSyn$num)],AlldataSyn$colMeansTs[order(AlldataSyn$num)]+0.001,col=AlldataSyn$color[order(AlldataSyn$num)],pch=16,
log="y",
type="b",
ylim = c(0.001,0.06)    )#,ylim=c(0,max(RTdataNonSyn$colMeansTs)))
lines(c(82*3,107*3),c(0.002,0.002),col=2,lwd=2)
plot(AlldataSyn$num[order(AlldataSyn$num)],AlldataSyn$colMeansTs[order(AlldataSyn$num)]+0.001,col=AlldataSyn$color[order(AlldataSyn$num)],pch=16,
log="y",
type="b",
ylim = c(0.001,0.06)    )#,ylim=c(0,max(RTdataNonSyn$colMeansTs)))
lines(c(82*3,107*3),c(0.002,0.002),col=2,lwd=2)
lines(c(7*3,31*3),c(0.002,0.002),col=2,lwd=2)
string1 <- "ACTTCACCAGCTCCCTGGCGGTAAGTTGATC---AAAGG---AAACGCAAAGTTTTCAAG"
string2 <- "GTTTCACTACTTCCTTTCGGGTAAGTAAATATATAAATATATAAAAATATAATTTTCATC"
compareStrings(string1, string2)
source('./baseRscript.R')
source('./baseRscript.R')
if (TRUE){#read the stored data
read.table("../Output/freqPatTsInclDay0-threshold.csv",sep=",",header=TRUE,row.names=1)->freqPatTs
}
attach(freqPatTs); colMeansTs<-apply(freqPatTs, 2 , mean, na.rm=TRUE)
OverviewDF<-data.frame(num=1:984,colMeansTs,TypeOfSite)
OverviewDFOrderedByFreq <- OverviewDF[order(colMeansTs),]
OverviewDFOrderedByFreq$color<-""
for (i in 1:984){
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="syn") OverviewDFOrderedByFreq$color[i] = "green"
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="nonsyn") OverviewDFOrderedByFreq$color[i] = "red"
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="stop") OverviewDFOrderedByFreq$color[i] = "black"
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="res") OverviewDFOrderedByFreq$color[i] = "purple"
}
freqPatTs<-round(freqPatTs,2)
PROdata<-OverviewDFOrderedByFreq[OverviewDFOrderedByFreq$num<298,]
PROdata<-PROdata[PROdata$TypeOfSite!="res",]
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=2, pch = "|",col=PROdata$color)
barplot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=2, pch = "|",col=PROdata$color)
barplot(PROdata$colMeansTs)
barplot(PROdata$colMeansTs,log="y")
barplot(log(PROdata$colMeansTs+0.001))
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=2, pch = "|",col=PROdata$color)
barplot(log(PROdata$colMeansTs+0.001))
barplot(7+log(PROdata$colMeansTs+0.001))
barplot(7+log(PROdata$colMeansTs+0.001), col = PROdata$color)
log(0.001)
barplot(-log(0.001)+log(PROdata$colMeansTs+0.001), col = PROdata$color)
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=2, pch = "|",col=PROdata$color)
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=3, pch = "|",col=PROdata$color)
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=3, pch = "|",col=PROdata$color, xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency")
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=3, pch = "|",col=PROdata$color, xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
axis(2,labels = c(0,0.001), at = c(0,0.001))
points(PROdata$colMeansTs+0.001)
points(PROdata$colMeansTs+0.001, pch = 16,cex = 1)
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=3, pch = "|",col=PROdata$color, xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
points(PROdata$colMeansTs+0.001, pch = 16,cex = .5)
axis(2,labels = c(0,0.001), at = c(0.001))
axis(2,labels = c(0,0.001, 0.005), at = c(0.001, 0.002, 0.006))
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=3, pch = "|",col=PROdata$color, xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
axis(2,labels = c(0,0.001, 0.005), at = c(0.001, 0.002, 0.006))
axis(2,labels = c(0,0.001, 0.005, 0.01, 0.1), at = c(0.001, 0.002, 0.006, 0.011, 0.101))
abline (h = 0.0015)
abline (h = 0.0013)
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=3, pch = "|",col=PROdata$color, xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
#points(PROdata$colMeansTs+0.001, pch = 16,cex = .5)
axis(2,labels = c(0,0.001, 0.005, 0.01, 0.1), at = c(0.001, 0.002, 0.006, 0.011, 0.101))
abline (h = 0.0014)
abline (h = 0.011 + 0.0002)
abline (h = 0.051 + 0.0002)
abline (h = 0.008 + 0.0002)
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=3, pch = ".",col=PROdata$color, xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=3, pch = 16,col=PROdata$color, xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=1, pch = 16,col=PROdata$color, xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
barplot(-log(0.001)+log(PROdata$colMeansTs+0.001), col = PROdata$color)
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=1, pch = 16,col=PROdata$color, xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
axis(2,labels = c(0,0.001, 0.005, 0.01, 0.1), at = c(0.001, 0.002, 0.006, 0.011, 0.101))
abline (h = 0.001 + 0.0002)
abline (h = 0.008 + 0.0002)
abline (h = 0.051 + 0.0002)
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=1, pch = 16,col=PROdata$color, xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
#points(PROdata$colMeansTs+0.001, pch = 16,cex = .5)
axis(2,labels = c(0,0.001, 0.005, 0.01, 0.1), at = c(0.001, 0.002, 0.006, 0.011, 0.101))
abline (h = 0.001 + 0.00002)
abline (h = 0.008 + 0.00002)
abline (h = 0.051 + 0.00002)
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=1, pch = 16,col=PROdata$color, xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
#points(PROdata$colMeansTs+0.001, pch = 16,cex = .5)
axis(2,labels = c(0,0.001, 0.005, 0.01, 0.1), at = c(0.001, 0.002, 0.006, 0.011, 0.101))
abline (h = 0.001 + 0.00004)
abline (h = 0.005 + 0.00004)
abline (h = 0.051 + 0.00004)
0.005*10^-5
1/0.005*10^-5
1/0.004*10^-5
abline (h = 0.004 + 0.001)
abline (h = 0.003 + 0.001)
1/0.003*10^-5
1/0.05*10^-5
abline (h = 10^-4 + 0.001)
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=1, pch = 16,col=PROdata$color, xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
axis(2,labels = c(0,0.001, 0.005, 0.01, 0.1), at = c(0.001, 0.002, 0.006, 0.011, 0.101))
pdf("../Output/Protease.pdf",width = 13, height = 10)
PROdata<-OverviewDFOrderedByFreq[OverviewDFOrderedByFreq$num<298,]
#remove resistance mutations
PROdata<-PROdata[PROdata$TypeOfSite!="res",]
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=1, pch = 16,col=PROdata$color, xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
#points(PROdata$colMeansTs+0.001, pch = 16,cex = .5)
axis(2,labels = c(0,0.001, 0.005, 0.01, 0.1), at = c(0.001, 0.002, 0.006, 0.011, 0.101))
#abline (h = 0.001 + 0.00004)
#abline (h = 0.005 + 0.00004)
#abline (h = 0.051 + 0.00004)
#barplot(-log(0.001)+log(PROdata$colMeansTs+0.001), col = PROdata$color)
#arrows(1:length(PROdata$num), PROdata$lowerConf +0.001, 1:length(PROdata$num), PROdata$upperConf +0.001,
#       angle=90, length=0.01, code=3, col=PROdata$color,lwd=0.1)
dev.off()
library(scales)
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=1, pch = 16,col=c(PROdata$color, 0.5), xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=1, pch = 16,col=alpha(PROdata$color, 0.5), xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=3, pch = 16,col=alpha(PROdata$color, 0.5), xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=3, pch = 16,col=alpha(PROdata$color, 0.3), xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=2, pch = 16,col=alpha(PROdata$color, 0.3), xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
points(PROdata$colMeansTs+0.001, pch = 16,cex = .5, col=alpha(PROdata$color, 1))
PROdata<-OverviewDFOrderedByFreq[OverviewDFOrderedByFreq$num<100,]
#remove resistance mutations
PROdata<-PROdata[PROdata$TypeOfSite!="res",]
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=2, pch = 16,col=alpha(PROdata$color, 0.3), xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
axis(2,labels = c(0,0.001, 0.005, 0.01, 0.1), at = c(0.001, 0.002, 0.006, 0.011, 0.101))
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=2, pch = 16,col=alpha(PROdata$color, 1), xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
axis(2,labels = c(0,0.001, 0.005, 0.01, 0.1), at = c(0.001, 0.002, 0.006, 0.011, 0.101))
PROdata<-OverviewDFOrderedByFreq[OverviewDFOrderedByFreq$num<150,]
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=2, pch = 16,col=alpha(PROdata$color, 1), xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
PROdata<-OverviewDFOrderedByFreq[OverviewDFOrderedByFreq$num<298,]
#remove resistance mutations
PROdata<-PROdata[PROdata$TypeOfSite!="res",]
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=2, pch = 16,col=alpha(PROdata$color, 1), xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
axis(2,labels = c(0,0.001, 0.005, 0.01, 0.1), at = c(0.001, 0.002, 0.006, 0.011, 0.101))
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=1.5, pch = 16,col=alpha(PROdata$color, 1), xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
#PSP Nov 11 2015 I removed lowerConf and upperConf here because we no longer calculate them
#x<-data.frame(num=1:984,colMeansTs,TypeOfSite,lowerConf,upperConf)
#PSP Nov 11 2015 I renamed x OverviewDF and newdata OverviewDFOrderedByFreq
OverviewDF<-data.frame(num=1:984,colMeansTs,TypeOfSite)
OverviewDFOrderedByFreq <- OverviewDF[order(colMeansTs),]
OverviewDFOrderedByFreq$color<-""
for (i in 1:984){
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="syn") OverviewDFOrderedByFreq$color[i] = "darkgreen"
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="nonsyn") OverviewDFOrderedByFreq$color[i] = "red"
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="stop") OverviewDFOrderedByFreq$color[i] = "black"
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="res") OverviewDFOrderedByFreq$color[i] = "purple"
}
PROdata<-OverviewDFOrderedByFreq[OverviewDFOrderedByFreq$num<298,]
PROdata<-PROdata[PROdata$TypeOfSite!="res",]
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=1.5, pch = 16,col=alpha(PROdata$color, 1), xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
#PSP Nov 11 2015 I removed lowerConf and upperConf here because we no longer calculate them
#x<-data.frame(num=1:984,colMeansTs,TypeOfSite,lowerConf,upperConf)
#PSP Nov 11 2015 I renamed x OverviewDF and newdata OverviewDFOrderedByFreq
OverviewDF<-data.frame(num=1:984,colMeansTs,TypeOfSite)
OverviewDFOrderedByFreq <- OverviewDF[order(colMeansTs),]
OverviewDFOrderedByFreq$color<-""
for (i in 1:984){
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="syn") OverviewDFOrderedByFreq$color[i] = "darkolivegreen"
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="nonsyn") OverviewDFOrderedByFreq$color[i] = "coral1"
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="stop") OverviewDFOrderedByFreq$color[i] = "black"
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="res") OverviewDFOrderedByFreq$color[i] = "purple"
}
PROdata<-OverviewDFOrderedByFreq[OverviewDFOrderedByFreq$num<298,]
#remove resistance mutations
PROdata<-PROdata[PROdata$TypeOfSite!="res",]
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=1.5, pch = 16,col=alpha(PROdata$color, 1), xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
#PSP Nov 11 2015 I removed lowerConf and upperConf here because we no longer calculate them
#x<-data.frame(num=1:984,colMeansTs,TypeOfSite,lowerConf,upperConf)
#PSP Nov 11 2015 I renamed x OverviewDF and newdata OverviewDFOrderedByFreq
OverviewDF<-data.frame(num=1:984,colMeansTs,TypeOfSite)
OverviewDFOrderedByFreq <- OverviewDF[order(colMeansTs),]
OverviewDFOrderedByFreq$color<-""
for (i in 1:984){
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="syn") OverviewDFOrderedByFreq$color[i] = "darkolivegreen3"
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="nonsyn") OverviewDFOrderedByFreq$color[i] = "red"
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="stop") OverviewDFOrderedByFreq$color[i] = "black"
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="res") OverviewDFOrderedByFreq$color[i] = "purple"
}
PROdata<-OverviewDFOrderedByFreq[OverviewDFOrderedByFreq$num<298,]
#remove resistance mutations
PROdata<-PROdata[PROdata$TypeOfSite!="res",]
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=1.5, pch = 16,col=alpha(PROdata$color, 1), xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
axis(2,labels = c(0,0.001, 0.005, 0.01, 0.1), at = c(0.001, 0.002, 0.006, 0.011, 0.101))
axis(2,labels = c(0,0.001, 0.005, 0.05, 0.1), at = c(0.001, 0.002, 0.006, 0.051, 0.101))
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=1.5, pch = 16,col=alpha(PROdata$color, 1), xlab = "Nucleotides ordered by mean mutation frequency", ylab = "Mean mutation frequency" , yaxt = "n")
axis(2,labels = c(0,0.001, 0.005, 0.05, 0.1), at = c(0.001, 0.002, 0.006, 0.051, 0.101))
6337*12
6337*15
library(swirl)
rm(list=ls())
swirl()
