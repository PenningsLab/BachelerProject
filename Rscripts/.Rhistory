for (i in 1:length(listfastafiles)){ #for each fastafile
filename=paste("../Data/BachelerFiles/FASTAfiles/",substr(listfastafiles[i],1,6),".fasta",sep="")
print(filename)
patfasta<-read.dna(filename, format = "fasta",as.character=TRUE) #read the file
if(nrow(patfasta)==1){
freqPatTs_threshold[i,1:984]<-NA
filterSummary[i,1:984]<-'1seq'
Patientswith1sequence<-Patientswith1sequence+1
}
else{
#which seqs are from first day of sampling
days=sort(unique(as.numeric(substr(row.names(patfasta),5,7))))
day0sequences<-which(as.numeric(substr(row.names(patfasta),5,7))==days[1])
latersequences<-which(as.numeric(substr(row.names(patfasta),5,7))>days[1])
allsequences=c(day0sequences,latersequences)
for (j in 1:984){#for each site in the sequence
#print(paste('j',j))
WT=	consensusB[j] #what is WT at site j?
if(prop.table(table(patfasta[day0sequences,j]==WT))[which(names(prop.table(table(patfasta[day0sequences,j]==WT)))==TRUE)] < 0.66){
freqPatTs_threshold[i,j]<-NA
#keep track of pat and pos that are excluded
Nonconsensusday0_pat_pos<-rbind(Nonconsensusday0_pat_pos,c(i,j))
filterSummary[i,j]<-'nonconsensus'
}
else { #check wether the neigboring sequences are the same
# in order to check whether j is the first, second or third position of the codon, you can do
if(j %in% seq(1,982,by=3)) {# first position
goodsequences<-which(paste(patfasta[,j+1],patfasta[,j+2]) == paste(consensusB[c(j+1)],consensusB[(j+2)]))
filterSummary[i,j]<-length(goodsequences)
if (WT=="c"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="t"))/length(goodsequences)}
if (WT=="t"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="c"))/length(goodsequences)}
if (WT=="a"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="g"))/length(goodsequences)}
if (WT=="g"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="a"))/length(goodsequences)
}}
if((j %in% seq(2,983,by=3))) {# second position
goodsequences<-which(paste(patfasta[,j-1],patfasta[,j+1]) == paste(consensusB[c(j-1)],consensusB[(j+1)]))
filterSummary[i,j]<-length(goodsequences)
if (WT=="c"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="t"))/length(goodsequences)}
if (WT=="t"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="c"))/length(goodsequences)}
if (WT=="a"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="g"))/length(goodsequences)}
if (WT=="g"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="a"))/length(goodsequences)
}}
if((j %in% seq(3,984,by=3))) {# third position
goodsequences<-which(paste(patfasta[,j-2],patfasta[,j-1]) == paste(consensusB[c(j-2)],consensusB[(j-1)]))
filterSummary[i,j]<-length(goodsequences)
if (WT=="c"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="t"))/length(goodsequence)}
if (WT=="t"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="c"))/length(goodsequences)}
if (WT=="a"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="g"))/length(goodsequences)}
if (WT=="g"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="a"))/length(goodsequences)}}
}}
}
#remove Patients without data
for (pat in ListPatientsWithoutData){
freqPatSite<-freqPatSite[-which(row.names(freqPatSite)==pat),]
freqPatTs<-freqPatTs[-which(row.names(freqPatTs)==pat),]
}
write.csv(freqPatTs_threshold,file="../Output/freqPatTsInclDay0-threshold.csv")
}
patfasta
Patientswith1sequence<-0
Nonconsensusday0_pat_pos<-c()
ListPatientsWithoutData<-c()
for (i in 1:length(listfastafiles)){ #for each fastafile
filename=paste("../Data/BachelerFiles/FASTAfiles/",substr(listfastafiles[i],1,6),".fasta",sep="")
print(filename)
patfasta<-read.dna(filename, format = "fasta",as.character=TRUE) #read the file
if(nrow(patfasta)==1){
freqPatTs_threshold[i,1:984]<-NA
filterSummary[i,1:984]<-'1seq'
Patientswith1sequence<-Patientswith1sequence+1
}
else{
#which seqs are from first day of sampling
days=sort(unique(as.numeric(substr(row.names(patfasta),5,7))))
day0sequences<-which(as.numeric(substr(row.names(patfasta),5,7))==days[1])
latersequences<-which(as.numeric(substr(row.names(patfasta),5,7))>days[1])
allsequences=c(day0sequences,latersequences)
for (j in 1:984){#for each site in the sequence
#print(paste('j',j))
WT=	consensusB[j] #what is WT at site j?
if(prop.table(table(patfasta[day0sequences,j]==WT))[which(names(prop.table(table(patfasta[day0sequences,j]==WT)))==TRUE)] < 0.66){
freqPatTs_threshold[i,j]<-NA
#keep track of pat and pos that are excluded
Nonconsensusday0_pat_pos<-rbind(Nonconsensusday0_pat_pos,c(i,j))
filterSummary[i,j]<-'nonconsensus'
}
else { #check wether the neigboring sequences are the same
# in order to check whether j is the first, second or third position of the codon, you can do
if(j %in% seq(1,982,by=3)) {# first position
goodsequences<-which(paste(patfasta[,j+1],patfasta[,j+2]) == paste(consensusB[c(j+1)],consensusB[(j+2)]))
filterSummary[i,j]<-length(goodsequences)
if (WT=="c"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="t"))/length(goodsequences)}
if (WT=="t"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="c"))/length(goodsequences)}
if (WT=="a"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="g"))/length(goodsequences)}
if (WT=="g"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="a"))/length(goodsequences)
}}
if((j %in% seq(2,983,by=3))) {# second position
goodsequences<-which(paste(patfasta[,j-1],patfasta[,j+1]) == paste(consensusB[c(j-1)],consensusB[(j+1)]))
filterSummary[i,j]<-length(goodsequences)
if (WT=="c"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="t"))/length(goodsequences)}
if (WT=="t"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="c"))/length(goodsequences)}
if (WT=="a"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="g"))/length(goodsequences)}
if (WT=="g"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="a"))/length(goodsequences)
}}
if((j %in% seq(3,984,by=3))) {# third position
goodsequences<-which(paste(patfasta[,j-2],patfasta[,j-1]) == paste(consensusB[c(j-2)],consensusB[(j-1)]))
filterSummary[i,j]<-length(goodsequences)
if (WT=="c"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="t"))/length(goodsequence)}
if (WT=="t"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="c"))/length(goodsequences)}
if (WT=="a"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="g"))/length(goodsequences)}
if (WT=="g"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="a"))/length(goodsequences)}}
}}
}
#remove Patients without data
for (pat in ListPatientsWithoutData){
freqPatSite<-freqPatSite[-which(row.names(freqPatSite)==pat),]
freqPatTs<-freqPatTs[-which(row.names(freqPatTs)==pat),]
}
write.csv(freqPatTs_threshold,file="../Output/freqPatTsInclDay0-threshold.csv")
}
patfasta[day0sequences,j]
WT
prop.table(table(patfasta[day0sequences,j]==WT
)
)
prop.table(table(patfasta[day0sequences,j]==WT))
length(names(prop.table(table(patfasta[day0sequences,j)==1
length(names(prop.table(table(patfasta[day0sequences,j))==1
length(names(prop.table(table(patfasta[day0sequences,j)))==1
length(names(prop.table(table(patfasta[day0sequences,j))))==1
names(prop.table(table(patfasta[day0sequences,j))))
names(prop.table(table(patfasta[day0sequences,j)))
names(prop.table(table(patfasta[day0sequences,j))
names(prop.table(table(patfasta[day0sequences,j)
names(prop.table(table(patfasta[day0sequences,j] ==WT)))
length(names(prop.table(table(patfasta[day0sequences,j] ==WT))))
length(names(prop.table(table(patfasta[day0sequences,j] ==WT))))==1
length(names(prop.table(table(patfasta[day0sequences,j] ==WT))))==1 & names(prop.table(table(patfasta[day0sequences,j] ==WT))))==FALSE
length(names(prop.table(table(patfasta[day0sequences,j] ==WT))))==1 & names(prop.table(table(patfasta[day0sequences,j] ==WT))))==FALSE
names(prop.table(table(patfasta[day0sequences,j] ==WT))))==FALSE
names(prop.table(table(patfasta[day0sequences,j] ==WT)))==FALSE
length(names(prop.table(table(patfasta[day0sequences,j] ==WT))))==1 & names(prop.table(table(patfasta[day0sequences,j] ==WT)))==FALSE
Patientswith1sequence<-0
Nonconsensusday0_pat_pos<-c()
ListPatientsWithoutData<-c()
for (i in 1:length(listfastafiles)){ #for each fastafile
filename=paste("../Data/BachelerFiles/FASTAfiles/",substr(listfastafiles[i],1,6),".fasta",sep="")
print(filename)
patfasta<-read.dna(filename, format = "fasta",as.character=TRUE) #read the file
if(nrow(patfasta)==1){
freqPatTs_threshold[i,1:984]<-NA
filterSummary[i,1:984]<-'1seq'
Patientswith1sequence<-Patientswith1sequence+1
}
else{
#which seqs are from first day of sampling
days=sort(unique(as.numeric(substr(row.names(patfasta),5,7))))
day0sequences<-which(as.numeric(substr(row.names(patfasta),5,7))==days[1])
latersequences<-which(as.numeric(substr(row.names(patfasta),5,7))>days[1])
allsequences=c(day0sequences,latersequences)
for (j in 1:984){#for each site in the sequence
#print(paste('j',j))
WT=	consensusB[j] #what is WT at site j?
if(length(names(prop.table(table(patfasta[day0sequences,j] ==WT))))==1 & names(prop.table(table(patfasta[day0sequences,j] ==WT)))==FALSE){
freqPatTs_threshold[i,j]<-NA
#keep track of pat and pos that are excluded
Nonconsensusday0_pat_pos<-rbind(Nonconsensusday0_pat_pos,c(i,j))
filterSummary[i,j]<-'nonconsensus'
}
else if(prop.table(table(patfasta[day0sequences,j]==WT))[which(names(prop.table(table(patfasta[day0sequences,j] ==WT)))==TRUE)] < 0.66){
freqPatTs_threshold[i,j]<-NA
#keep track of pat and pos that are excluded
Nonconsensusday0_pat_pos<-rbind(Nonconsensusday0_pat_pos,c(i,j))
filterSummary[i,j]<-'nonconsensus'
}
else { #check wether the neigboring sequences are the same
# in order to check whether j is the first, second or third position of the codon, you can do
if(j %in% seq(1,982,by=3)) {# first position
goodsequences<-which(paste(patfasta[,j+1],patfasta[,j+2]) == paste(consensusB[c(j+1)],consensusB[(j+2)]))
filterSummary[i,j]<-length(goodsequences)
if (WT=="c"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="t"))/length(goodsequences)}
if (WT=="t"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="c"))/length(goodsequences)}
if (WT=="a"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="g"))/length(goodsequences)}
if (WT=="g"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="a"))/length(goodsequences)
}}
if((j %in% seq(2,983,by=3))) {# second position
goodsequences<-which(paste(patfasta[,j-1],patfasta[,j+1]) == paste(consensusB[c(j-1)],consensusB[(j+1)]))
filterSummary[i,j]<-length(goodsequences)
if (WT=="c"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="t"))/length(goodsequences)}
if (WT=="t"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="c"))/length(goodsequences)}
if (WT=="a"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="g"))/length(goodsequences)}
if (WT=="g"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="a"))/length(goodsequences)
}}
if((j %in% seq(3,984,by=3))) {# third position
goodsequences<-which(paste(patfasta[,j-2],patfasta[,j-1]) == paste(consensusB[c(j-2)],consensusB[(j-1)]))
filterSummary[i,j]<-length(goodsequences)
if (WT=="c"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="t"))/length(goodsequence)}
if (WT=="t"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="c"))/length(goodsequences)}
if (WT=="a"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="g"))/length(goodsequences)}
if (WT=="g"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="a"))/length(goodsequences)}}
}}
}
#remove Patients without data
for (pat in ListPatientsWithoutData){
freqPatSite<-freqPatSite[-which(row.names(freqPatSite)==pat),]
freqPatTs<-freqPatTs[-which(row.names(freqPatTs)==pat),]
}
write.csv(freqPatTs_threshold,file="../Output/freqPatTsInclDay0-threshold.csv")
}
#new addition
#new addition
#1. only take patienys with a consensus sequence at Day0
#2. only consider changed nucleotides when the two other nucleotides in a codon are not mutated
#get all the names of the fasta files for each patient in Bacheler2000 dataset
#determine all the frequencies and store in freqPatSite data.frame
#only needed if the stored data are not O
#Load libraries and necessary files from the baseRscript.Rmd
source('baseRscript.R')
#Read the correct fastafiles.
if (TRUE){
list.files(path="../Data/BachelerFiles/FASTAfiles/")->listfastafiles
lengthlatersequenceslist<-c();lengthallsequenceslist<-c()
#make dataframe with frequencies for all non-muts for all patients for all sites.
freqPatTs_threshold<-data.frame(row.names=substr(listfastafiles,1,6))
#make dataframe that keeps track, for each position and patients, what happened according to criteria and which data points are included
filterSummary<-data.frame(row.names=substr(listfastafiles,1,6))
Patientswith1sequence<-0
Nonconsensusday0_pat_pos<-c()
ListPatientsWithoutData<-c()
for (i in 1:length(listfastafiles)){ #for each fastafile
filename=paste("../Data/BachelerFiles/FASTAfiles/",substr(listfastafiles[i],1,6),".fasta",sep="")
print(filename)
patfasta<-read.dna(filename, format = "fasta",as.character=TRUE) #read the file
if(nrow(patfasta)==1){
freqPatTs_threshold[i,1:984]<-NA
filterSummary[i,1:984]<-'1seq'
Patientswith1sequence<-Patientswith1sequence+1
}
else{
#which seqs are from first day of sampling
days=sort(unique(as.numeric(substr(row.names(patfasta),5,7))))
day0sequences<-which(as.numeric(substr(row.names(patfasta),5,7))==days[1])
latersequences<-which(as.numeric(substr(row.names(patfasta),5,7))>days[1])
allsequences=c(day0sequences,latersequences)
for (j in 1:984){#for each site in the sequence
#print(paste('j',j))
WT=	consensusB[j] #what is WT at site j?
if(length(names(prop.table(table(patfasta[day0sequences,j] ==WT))))==1 & names(prop.table(table(patfasta[day0sequences,j] ==WT)))==FALSE){
freqPatTs_threshold[i,j]<-NA
#keep track of pat and pos that are excluded
Nonconsensusday0_pat_pos<-rbind(Nonconsensusday0_pat_pos,c(i,j))
filterSummary[i,j]<-'nonconsensus'
}
else if(prop.table(table(patfasta[day0sequences,j]==WT))[which(names(prop.table(table(patfasta[day0sequences,j] ==WT)))==TRUE)] < 0.66){
freqPatTs_threshold[i,j]<-NA
#keep track of pat and pos that are excluded
Nonconsensusday0_pat_pos<-rbind(Nonconsensusday0_pat_pos,c(i,j))
filterSummary[i,j]<-'nonconsensus'
}
else { #check wether the neigboring sequences are the same
# in order to check whether j is the first, second or third position of the codon, you can do
if(j %in% seq(1,982,by=3)) {# first position
goodsequences<-which(paste(patfasta[,j+1],patfasta[,j+2]) == paste(consensusB[c(j+1)],consensusB[(j+2)]))
filterSummary[i,j]<-length(goodsequences)
if (WT=="c"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="t"))/length(goodsequences)}
if (WT=="t"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="c"))/length(goodsequences)}
if (WT=="a"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="g"))/length(goodsequences)}
if (WT=="g"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="a"))/length(goodsequences)
}}
if((j %in% seq(2,983,by=3))) {# second position
goodsequences<-which(paste(patfasta[,j-1],patfasta[,j+1]) == paste(consensusB[c(j-1)],consensusB[(j+1)]))
filterSummary[i,j]<-length(goodsequences)
if (WT=="c"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="t"))/length(goodsequences)}
if (WT=="t"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="c"))/length(goodsequences)}
if (WT=="a"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="g"))/length(goodsequences)}
if (WT=="g"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="a"))/length(goodsequences)
}}
if((j %in% seq(3,984,by=3))) {# third position
goodsequences<-which(paste(patfasta[,j-2],patfasta[,j-1]) == paste(consensusB[c(j-2)],consensusB[(j-1)]))
filterSummary[i,j]<-length(goodsequences)
if (WT=="c"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="t"))/length(goodsequences)}
if (WT=="t"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="c"))/length(goodsequences)}
if (WT=="a"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="g"))/length(goodsequences)}
if (WT=="g"){freqPatTs_threshold[i,j]=length(which(patfasta[goodsequences,j]=="a"))/length(goodsequences)}}
}}
}
#remove Patients without data
for (pat in ListPatientsWithoutData){
freqPatSite<-freqPatSite[-which(row.names(freqPatSite)==pat),]
freqPatTs<-freqPatTs[-which(row.names(freqPatTs)==pat),]
}
write.csv(freqPatTs_threshold,file="../Output/freqPatTsInclDay0-threshold.csv")
}
}
warnings()
freqPatTs_threshold
filterSummary
summary(filterSummary)
str(filterSummary)
source('./baseRscript.R')
read.table("../Output/freqPatTsInclDay0-threshold.csv",sep=",",header=TRUE,row.names=1)->freqPatTs
attach(freqPatTs); colMeansTs<-apply(freqPatTs, 2 , mean, na.rm=TRUE)
TypeOfSite<-c()
for (codon in 1:(984/3)){#for each codon in the sequence
positions <- c(codon*3-2,codon*3-1, codon*3)
WTcodon <- consensusB[positions]
mutant1codon <- c(transition(WTcodon[1]), WTcodon[2:3])
mutant2codon <- c(WTcodon[1],transition(WTcodon[2]), WTcodon[3])
mutant3codon <- c(WTcodon[1:2], transition(WTcodon[3]))
TypeOfSite<-c(TypeOfSite,typeofsitefunction(WTcodon,mutant1codon))
TypeOfSite<-c(TypeOfSite,typeofsitefunction(WTcodon,mutant2codon))
TypeOfSite<-c(TypeOfSite,typeofsitefunction(WTcodon,mutant3codon))
}
#make sure that resistance sites in RT have a diff type of site
TypeOfSite[sort(c((RTImuts$pos*3)-2,(RTImuts$pos*3)-1,(RTImuts$pos*3)))+297]<-"res"
table(TypeOfSite)
OverviewDF<-data.frame(num=1:984,colMeansTs,TypeOfSite)
OverviewDFOrderedByFreq <- OverviewDF[order(colMeansTs),]
OverviewDFOrderedByFreq$color<-""
for (i in 1:984){
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="syn") OverviewDFOrderedByFreq$color[i] = "green"
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="nonsyn") OverviewDFOrderedByFreq$color[i] = "red"
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="stop") OverviewDFOrderedByFreq$color[i] = "black"
if (OverviewDFOrderedByFreq$TypeOfSite[i]=="res") OverviewDFOrderedByFreq$color[i] = "purple"
}
freqPatTs<-round(freqPatTs,2)
PROdata<-OverviewDFOrderedByFreq[OverviewDFOrderedByFreq$num<298,]
#remove resistance mutations
PROdata<-PROdata[PROdata$TypeOfSite!="res",]
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=2, pch = "|",col=PROdata$color)
PROdata<-OverviewDFOrderedByFreq[OverviewDFOrderedByFreq$num<298,]
#remove resistance mutations
PROdata<-PROdata[PROdata$TypeOfSite!="res",]
plot(PROdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=2, pch = "|",col=PROdata$color)
RTdata<-OverviewDFOrderedByFreq[OverviewDFOrderedByFreq$num>=298,]
RTdata<-RTdata[RTdata$TypeOfSite!="res",]
plot(RTdata$colMeansTs+0.001,log="y",ylim=c(0.001,0.15),cex=1, pch = "|",col=RTdata$color)
translatedB<-translate(consensusB)
#convert the fasta files into AA sequences
translatedfasta<-c()
for (i in 1:length(listfastafiles)){ #for each fastafile
filename=paste("../Data/BachelerFiles/FASTAfiles/",substr(listfastafiles[i],1,6),".fasta",sep="")
patfasta<-read.dna(filename, format = "fasta",as.character=TRUE) #read the file
translatedfasta<-rbind(translatedfasta,t(apply(patfasta,1,function(x) translate(x))))
}
mutations<-c()
for(m in 1:length(translatedB)){
prevmut<-100-(length(which(translatedfasta[,m]==translatedB[m]))/nrow(translatedfasta)*100)
mutations<-c(mutations,prevmut)
}
plot(mutations[1:99],type='o',ylab='Mutation frequency (%)',xlab='AA position')
plot(mutations[ 100:328],type='o',ylab='Mutation frequency (%)',xlab='AA position',xaxt='n')
axis(1,(100:328)-99,label=(100:328)-99)
mutationposition<-cbind(1:229,mutations[100:328])
plot(mutationposition[-c(sort(RTImuts$pos)),1],mutationposition[-c(sort(RTImuts$pos)),2],type='o',ylab='Mutation frequency (%)',xlab='AA position',xaxt='n')
axis(1,(100:328)-99,label=(100:328)-99)
points(mutations[ 100:328],type='o',col='red')
plot(mutationposition[-c(sort(RTImuts$pos)),1],mutationposition[-c(sort(RTImuts$pos)),2],type='o',ylab='Mutation frequency (%)',xlab='AA position',xaxt='n')
points(mutationposition[-c(sort(RTImuts$pos)),1],mutationposition[-c(sort(RTImuts$pos)),2],col='red')
plot(mutationposition[-c(sort(RTImuts$pos)),1],mutationposition[-c(sort(RTImuts$pos)),2],type='o',ylab='Mutation frequency (%)',xlab='AA position',xaxt='n')
points(mutationposition[c(sort(RTImuts$pos)),1],mutationposition[c(sort(RTImuts$pos)),2],col='red')
axis(1,(100:328)-99,label=(100:328)-99)
PROdataNonSyn<-PROdata[PROdata$TypeOfSite=="nonsyn",]
plot(PROdataNonSyn$num[order(PROdataNonSyn$num)],PROdataNonSyn$colMeansTs[order(PROdataNonSyn$num)]+0.001,col=PROdataNonSyn$color[order(PROdataNonSyn$num)],pch=16,log="y",type="b")#,ylim=c(0,max(PROdataNonSyn$colMeansTs)))
for (i in 20:280){
range = (i-20):(i+20)
#    points(i, mean(PROdataNonSyn$colMeansTs[PROdataNonSyn$num%in%range]), col="blue",pch = 12, cex=3)
points(i, median(PROdataNonSyn$colMeansTs[PROdataNonSyn$num%in%range]), col="green",pch = 11, cex=3)
}
RTdataNonSyn<-RTdata[RTdata$TypeOfSite=="nonsyn",]
plot(RTdataNonSyn$num[order(RTdataNonSyn$num)],RTdataNonSyn$colMeansTs[order(RTdataNonSyn$num)]+0.001,col=RTdataNonSyn$color[order(RTdataNonSyn$num)],pch=16,log="y",type="b")
#Add moving mean
for (i in 370:900){
range = (i-20):(i+20)
points(i, mean(RTdataNonSyn$colMeansTs[RTdataNonSyn$num%in%range]), col="blue",pch = 12, cex=3)
points(i, median(RTdataNonSyn$colMeansTs[RTdataNonSyn$num%in%range]), col="green",pch = 11, cex=3)
}
plot(RTdataNonSyn$num[order(RTdataNonSyn$num)],RTdataNonSyn$colMeansTs[order(RTdataNonSyn$num)]+0.001,col=RTdataNonSyn$color[order(RTdataNonSyn$num)],pch=16,log="y",type="b")
plot(RTdataNonSyn$num[order(RTdataNonSyn$num)],RTdataNonSyn$colMeansTs[order(RTdataNonSyn$num)]+0.001,col=RTdataNonSyn$color[order(RTdataNonSyn$num)],pch=16,log="y",type="b")
read.table("../Output/freqPatTsInclDay0-threshold.csv",sep=",",header=TRUE,row.names=1)->freqPatTs
read.table("../Output/freqPatTsInclDay0-threshold.csv",sep=",",header=TRUE,row.names=1)->freqPatTs
TypeOfSite
colMeansTs<-apply(freqPatTs, 2 , mean, na.rm=TRUE)
OverviewDF<-data.frame(num=1:984,colMeansTs, TypeOfSite)
OverviewDFSyn<-OverviewDF[OverviewDF$TypeOfSite=="syn",]
hist(OverviewDFSyn$colMeansTs)
var(OverviewDFSyn$colMeansTs)
freqPatTsSyn<-freqPatTs[,OverviewDF$TypeOfSite=="syn"]
consensusBSyn<-consensusB[OverviewDF$TypeOfSite=="syn"]
Asites<-which(consensusBSyn=="a")
Csites<-which(consensusBSyn=="c")
Gsites<-which(consensusBSyn=="g")
Tsites<-which(consensusBSyn=="t")
ListOfVars<-c()
#switch A sites
for (j in 1:1000){
freqPatTsRandomSyn<-freqPatTsSyn
for (i in 1:length(freqPatTs[,1])){
freqPatTsRandomSyn[i,sample(Asites)]<-freqPatTsSyn[i,Asites]
freqPatTsRandomSyn[i,sample(Csites)]<-freqPatTsSyn[i,Csites]
freqPatTsRandomSyn[i,sample(Gsites)]<-freqPatTsSyn[i,Gsites]
freqPatTsRandomSyn[i,sample(Tsites)]<-freqPatTsSyn[i,Tsites]
}
ListOfVars<-c(ListOfVars, var(apply(freqPatTsRandomSyn, 2 , mean, na.rm=TRUE)))
}
hist(OverviewDFSyn$colMeansTs)
hist(OverviewDFSyn$colMeansTs,breaks=10)
hist(OverviewDFSyn$colMeansTs,breaks=30)
hist(OverviewDFSyn$colMeansTs,breaks=50)
ListOfVars
hist(ListOfVars,breaks=20,xlim=c(8*10^-6,2*10^-5), main="Histogram of variances vs observed variance")
abline(v=var(apply(freqPatTsv2Syn, 2 , mean, na.rm=TRUE)),col=2,lwd=2)
hist(ListOfVars,breaks=20,xlim=c(8*10^-6,2*10^-5), main="Histogram of variances vs observed variance")
abline(v=var(apply(freqPatTsSyn, 2 , mean, na.rm=TRUE)),col=2,lwd=2)
hist(ListOfVars,breaks=20,xlim=c(8*10^-6,2*10^-5), main="Histogram of variances vs observed variance")
hist(ListOfVars,breaks=20,xlim=c(8*10^-6,2*10^-5), main="Histogram of variances vs observed variance")
abline(v=var(apply(freqPatTsv2Syn, 2 , mean, na.rm=TRUE)),col=2,lwd=2)
hist(ListOfVars,breaks=20,xlim=c(8*10^-6,2*10^-5), main="Histogram of variances vs observed variance")
abline(v=var(apply(freqPatTsSyn, 2 , mean, na.rm=TRUE)),col=2,lwd=2)
freqPatTsSyn
ListOfVars
hist(ListOfVars
)
min(ListOfVars)
max(ListOfVars)
hist(ListOfVars,breaks=20,xlim=c(2.5*10^-5,4.5*10^-5), main="Histogram of variances vs observed variance")
v=var(apply(freqPatTsSyn, 2 , mean, na.rm=TRUE))
v
abline(v=var(apply(freqPatTsSyn, 2 , mean, na.rm=TRUE)),col=2,lwd=2)
hist(ListOfVars,breaks=20,xlim=c(2.5*10^-5,10*10^-5), main="Histogram of variances vs observed variance")
abline(v=var(apply(freqPatTsSyn, 2 , mean, na.rm=TRUE)),col=2,lwd=2)
hist(ListOfVars,breaks=20,xlim=c(2.5*10^-5,10*10^-5), main="Histogram of variances vs observed variance")
hist(ListOfVars,breaks=20,xlim=c(10*10^-5,2.5*10^-5), main="Histogram of variances vs observed variance")
hist(ListOfVars,breaks=20,xlim=c(2.5*10^-5,10*10^-5), main="Histogram of variances vs observed variance")
hist(ListOfVars,breaks=20,xlim=c(1*10^-5,10*10^-5), main="Histogram of variances vs observed variance")
abline(v=var(apply(freqPatTsSyn, 2 , mean, na.rm=TRUE)),col=2,lwd=2)
8*10^-6
as.numeric(8*10^-6)
as.character(8*10^-6)
options(scipen=999)
8*10^-6
2*10^-5
colMeansRandomSyn<-apply(freqPatTsRandomSyn, 2 , mean, na.rm=TRUE)
colMeansRandomSyn<-apply(freqPatTsRandomSyn, 2 , mean, na.rm=TRUE)
par(mfrow=c(1,1))
hist(apply(freqPatTsSyn, 2 , mean, na.rm=TRUE),breaks=seq(0,0.2,by=0.001),xlim=c(0,0.04),
#ylim=c(0,40),
col=rgb(1,0,0,0.5),main="Histogram of randomized (blue) vs observed (red) mean frequencies")
hist(colMeansRandomSyn,breaks=seq(0,0.1,by=0.001),xlim=c(0,0.04),ylim=c(0,40),add=T,col=rgb(0,0,1,0.5))
legend(4, 9, c('Random','Observed', lwd=4, col=c(rgb(0,0,1,0.5), rgb(1,0,0,0.5)))
)
legend(topright, c('Random','Observed', lwd=4, col=c(rgb(0,0,1,0.5), rgb(1,0,0,0.5))))
?legend
legend("topright", c('Random','Observed', lwd=4, col=c(rgb(0,0,1,0.5), rgb(1,0,0,0.5))))
legend("topright", c('Random','Observed'), lwd=4, col=c(rgb(0,0,1,0.5), rgb(1,0,0,0.5)))
?legend
?pch
legend("topright", c('Random','Observed'), lwd=4, col=c(rgb(0,0,1,0.5), rgb(1,0,0,0.5)),pch=15)
colMeansRandomSyn<-apply(freqPatTsRandomSyn, 2 , mean, na.rm=TRUE)
par(mfrow=c(1,1))
hist(apply(freqPatTsSyn, 2 , mean, na.rm=TRUE),breaks=seq(0,0.2,by=0.001),xlim=c(0,0.04),
#ylim=c(0,40),
col=rgb(1,0,0,0.5),main="Histogram of randomized (blue) vs observed (red) mean frequencies")
hist(colMeansRandomSyn,breaks=seq(0,0.1,by=0.001),xlim=c(0,0.04),ylim=c(0,40),add=T,col=rgb(0,0,1,0.5))
legend("topright", c('Random','Observed'), lwd=4, col=c(rgb(0,0,1,0.5), rgb(1,0,0,0.5)))
freqPatTsNonSyn<-freqPatTs[,OverviewDF$TypeOfSite=="nonsyn"]
consensusBNonSyn<-consensusB[OverviewDF$TypeOfSite=="nonsyn"]
AsitesNon<-which(consensusBNonSyn=="a")
CsitesNon<-which(consensusBNonSyn=="c")
GsitesNon<-which(consensusBNonSyn=="g")
TsitesNon<-which(consensusBNonSyn=="t")
freqPatTsNonSyn<-freqPatTs[,OverviewDF$TypeOfSite=="nonsyn"]
consensusBNonSyn<-consensusB[OverviewDF$TypeOfSite=="nonsyn"]
AsitesNonSyn<-which(consensusBNonSyn=="a")
CsitesNonSyn<-which(consensusBNonSyn=="c")
GsitesNonSyn<-which(consensusBNonSyn=="g")
TsitesNonSyn<-which(consensusBNonSyn=="t")
ListOfVarsNonSyn<-c()
#switch A sites
for (j in 1:1000){
freqPatTsRandomNonSyn<-freqPatTsNonSyn
for (i in 1:length(freqPatTs[,1])){
freqPatTsRandomNonSyn[i,sample(AsitesNonSyn)]<-freqPatTsNonSyn[i,AsitesNonSyn]
freqPatTsRandomNonSyn[i,sample(CsitesNonSyn)]<-freqPatTsNonSyn[i,CsitesNonSyn]
freqPatTsRandomNonSyn[i,sample(GsitesNonSyn)]<-freqPatTsNonSyn[i,GsitesNonSyn]
freqPatTsRandomNonSyn[i,sample(TsitesNonSyn)]<-freqPatTsNonSyn[i,TsitesNonSyn]
}
ListOfVarsNonSyn<-c(ListOfVarsNonSyn, var(apply(freqPatTsRandomNonSyn, 2 , mean, na.rm=TRUE)))
}
par(mfrow=c(1,1))
hist(ListOfVarsNonSyn,breaks=20,xlim=c(1*10^-5,10*10^-5), main="Histogram of variances vs observed variance")
abline(v=var(apply(freqPatTsNonSyn, 2 , mean, na.rm=TRUE)),col=2,lwd=2)
min(ListOfVarsNonSyn);max(ListOfVarsNonSyn)
v=var(apply(freqPatTsNonSyn, 2 , mean, na.rm=TRUE))
v
hist(ListOfVarsNonSyn,breaks=20,xlim=c(1*10^-4,10*10^-5), main="Histogram of variances vs observed variance")
abline(v=var(apply(freqPatTsNonSyn, 2 , mean, na.rm=TRUE)),col=2,lwd=2)
hist(ListOfVarsNonSyn,breaks=20,xlim=c(1*10^-6,10*10^-5), main="Histogram of variances vs observed variance")
abline(v=var(apply(freqPatTsNonSyn, 2 , mean, na.rm=TRUE)),col=2,lwd=2)
wildtypebegin
126/110
126/1.145
82/1.145
126/105
82/1.2
wildtypebegin
filterSummary
aplly(filterSummary,2,
d
dd
d
d
