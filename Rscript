#Trying out git with Kristof

TypeOfSite2<-TypeOfSite

TypeOfSite2[TypeOfSite2=='4'] <-c('blue')
TypeOfSite2[TypeOfSite2=='2'] <-c('red')
TypeOfSite2[TypeOfSite2=='3'] <-c('red')
TypeOfSite2[TypeOfSite2=='5'] <-c('green')


dd<-cbind(colMeansTs[298:984],TypeOfSite2[298:984])
dddd<-ddd[order(ddd[,1]),]

plot(rep(0.5,687),col=dddd[,2],type='h',ylim=c(0,0.5))
lines(dddd[,1],type='l',col='yellow')



ff<-cbind(colMeans[298:984],colorvector)
ffff<-ff[order(ff[,1]),]
plot(rep(0.5,687),col=ffff[,2],type='h',ylim=c(0,0.5))
lines(ffff[,1],type='l',col='yellow')




gg<-cbind(colMeansTv[298:984],colorvectortv)
gggg<-gg[order(as.numeric(gg[,1])),]
plot(rep(0.5,687),col=gggg[,2],type='h',ylim=c(0,0.5))
lines(as.numeric(gggg[,1]),type='l',col='yellow')




dfg<-cbind(dd,gg,ff)
dfgorder<-dfg[order(dfg[,5]),]

dfgorder[,c(2,4)]



# ordered, bar, en yellow line frequence  FINAL
pdf('frequency-synnonsym.pdf')
par(mfrow = c(3,1),
oma = c(5,4,0,0) + 0.1,
mar = c(0,0,1,1) + 0.1)
plot(rep(0.5,687),col=dfgorder[,2],type='h',ylim=c(0,0.5))
lines(as.numeric(dfgorder[,1]),type='l',col='yellow')
plot(rep(0.5,687),col=dfgorder[,4],type='h',ylim=c(0,0.5))
lines(as.numeric(dfgorder[,3]),type='l',col='yellow')
plot(rep(0.5,687),col=dfgorder[,6],type='h',ylim=c(0,0.5))
lines(as.numeric(dfgorder[,5]),type='l',col='yellow')
dev.off()


pdf('frequency-synnonsym2.pdf')
par(mfrow = c(3,1),
oma = c(5,4,0,0) + 0.1,
mar = c(0,0,1,1) + 0.1)
plot(log(as.numeric(dfgorder[,1])*100),col=dfgorder[,2])
plot(log(as.numeric(dfgorder[,3])*100),col=dfgorder[,4])
plot(log(as.numeric(dfgorder[,5])*100),col=dfgorder[,6])
dev.off()



## orderred correctly
par(mfrow = c(3,1),
oma = c(5,4,0,0) + 0.1,
mar = c(0,0,1,1) + 0.1)
plot(rep(0.5,687),col=dddd[,2],type='h',ylim=c(0,0.5))
lines(dddd[,1],type='l',col='yellow')
plot(rep(0.5,687),col=gggg[,2],type='h',ylim=c(0,0.5))
lines(as.numeric(gggg[,1]),type='l',col='yellow')
plot(rep(0.5,687),col=ffff[,2],type='h',ylim=c(0,0.5))
lines(ffff[,1],type='l',col='yellow')



## other
par(mfrow = c(2,1),
oma = c(5,4,0,0) + 0.1,
mar = c(0,0,1,1) + 0.1)
plot(rep(0.5,687),col=ddd[,2],type='h',ylim=c(0,0.5))
lines(dd[,1],type='l',col='yellow')
plot(rep(0.5,687),col=ff[,2],type='h',ylim=c(0,0.5))
lines(ff[,1],type='l',col='yellow')




par(mfrow = c(2,1),
oma = c(5,4,0,0) + 0.1,
mar = c(0,0,1,1) + 0.1)
plot(rep(0.5,687),col=ddd[,2],type='h',ylim=c(0,0.5))
plot(rep(0.5,687),col=ff[,2],type='h',ylim=c(0,0.5),xaxt='n')
axis(1,1:229,at=seq(1,687,by=3),cex=0.4)
axis(1,rep("R",22),at=(sort(RTImuts[,1])*3)+1.,cex=0.4)





# according to position With frequence
par(mfrow = c(2,1),
oma = c(5,4,0,0) + 0.1,
mar = c(0,0,1,1) + 0.1)
plot(ddd[,1],col=ddd[,2],type='h',ylim=c(0,0.5))
plot(ff[,1],col=ff[,2],type='h',ylim=c(0,0.5),xaxt='n')
axis(1,rep("R",22),at=(sort(RTImuts[,1])*3)+1.,cex=0.4)

axis(1,1:229,at=seq(1,687,by=3),cex=0.4)



#Working on this Sep 2015, preparing code for Marion and Kristof

#Working on this again in December 2014. Want to test how well we can estimate the mean frequency of a mutation. 
#I will determine mean freq for each site and then do bootstrapping to get 95% conf intervals
#This may be useful as prelim data for NSF proposal. 

#I plan to plot the frequencies of mutations WITHIN all patients. 
#So for each site, I determine the B consensus base, this will be WT
#Next, for each patient, I determine whether the seqs on day 1 were WT. 
#If that is the case then I will look at the freq of the non-WT bases on all days after day 1. 
#Accross all patients, I will have around one hundred frequencies for each base and each site. Now I look at the freq dist for each site. 
#If all 4-fold sites are truly neutral, then they should all show the same frequency distribution. 
#The distribution will not look like a neutral one because of the conditioning on starting off entirely WT. But it should still be OK to compare between sites, because I do the conditioning for each site.

#DEPENDS ON source("/Users/pleuni/Documents/Research/HIV/SoftSweepsInHIV/Bacheler2000/RResistanceMutations.r")
#DEPENDS ON "/Users/pleuni/Documents/Research/HIV/SoftSweepsInHIV/HowToGenbank/HIV1_CON_2004_POL_DNA.fasta"
#DEPENDS ON OR CREATES "freqPatSite.csv"
#CREATES pdf("Distribution_Prob_Seg.pdf")
#CREATES pdf("freqdis_WITHINallpatients_12.pdf")
#CREATES pdf("freqdis_WITHINallpatients_3_ffdeg.pdf")
#CREATES pdf("freqdis_WITHINallpatients_3_NOTffdeg.pdf")

#load relevant libraries and read consensusfasta file
if (TRUE){
    setwd("~/Dropbox/MarionKristofBachelerProject")
    
	library(ape)
	library(seqinr)
	library(pegas)
	#read the file with the resistance mutations
	source("RResistanceMutations.r")
	#read the fasta file 
	consensusfasta<-read.dna("/Users/pleuni/Documents/Research/HIV/SoftSweepsInHIV/HowToGenbank/HIV1_CON_2004_POL_DNA.fasta", format = "fasta",as.character=TRUE)	
	#where is the start of POL? 
	polstart=regexpr("cctca",paste(consensusfasta[which(row.names(consensusfasta)=="CONSENSUS_B"),],collapse=""))[1]
	consensusB<-consensusfasta[which(row.names(consensusfasta)=="CONSENSUS_B"), polstart:(polstart+983)]
	consofcons<-consensusfasta[which(row.names(consensusfasta)=="CON_OF_CONS"), polstart:(polstart+983)]
}

#get all the names of the fasta files for each patient in Bacheler2000 dataset
#determine all the frequencies and store in freqPatSite data.frame
#only needed if the stored data are not OK
if (FALSE){

list.files(path="FASTAfiles/")->listfastafiles

lengthlatersequenceslist<-c();lengthallsequenceslist<-c()

#make dataframe with frequencies for all non-muts for all patients for all sites. 
freqPatSite<-data.frame(row.names=substr(listfastafiles,1,6))
freqPatTs<-data.frame(row.names=substr(listfastafiles,1,6))
freqPatTv<-data.frame(row.names=substr(listfastafiles,1,6))

ListPatientsWithoutData<-c()
for (i in 1:length(listfastafiles)){ #for each fastafile 
#for (i in 1:2){ #for each fastafile 
filename=paste("FASTAfiles/",substr(listfastafiles[i],1,6),".fasta",sep="")   ## kristof: waarom?   ## kristof changer
	print(filename)
	patfasta<-read.dna(filename, format = "fasta",as.character=TRUE) #read the file 
	#which seqs are from first day of sampling
	days=sort(unique(as.numeric(substr(row.names(patfasta),5,7))))
	day0sequences<-which(as.numeric(substr(row.names(patfasta),5,7))==days[1])
	latersequences<-which(as.numeric(substr(row.names(patfasta),5,7))>days[1])
	allsequences=c(day0sequences,latersequences)
	for (j in 1:984){#for each site in the sequence
		WT=	consensusB[j] #what is WT at site j?
		freqPatSite[i,j]=length(which(patfasta[allsequences,j]!=WT))/length(allsequences)#if WT, what is freq of non WT at later time points?  ## kristof: any change, ts and tv
        if (WT=="c"){freqPatTs[i,j]=length(which(patfasta[allsequences,j]=="t"))/length(allsequences)}   ## kristof only ts
		if (WT=="t"){freqPatTs[i,j]=length(which(patfasta[allsequences,j]=="c"))/length(allsequences)}
		if (WT=="a"){freqPatTs[i,j]=length(which(patfasta[allsequences,j]=="g"))/length(allsequences)}
		if (WT=="g"){freqPatTs[i,j]=length(which(patfasta[allsequences,j]=="a"))/length(allsequences)}
        if (WT=="a" | WT=="g"){freqPatTv[i,j]=length(which(patfasta[allsequences,j]=="c" | patfasta[allsequences,j]=="t"))/length(allsequences)}
        if (WT=="c" | WT=="t"){freqPatTv[i,j]=length(which(patfasta[allsequences,j]=="a" | patfasta[allsequences,j]=="g"))/length(allsequences)}


        }
}
#remove Patients without data 
for (pat in ListPatientsWithoutData){
  freqPatSite<-freqPatSite[-which(row.names(freqPatSite)==pat),]
  freqPatTs<-freqPatTs[-which(row.names(freqPatTs)==pat),]
}
write.csv(freqPatSite,file="freqPatSiteInclDay0.csv")
write.csv(freqPatTs,file="freqPatTsInclDay0.csv")
write.csv(freqPatTv,file="freqPatTvInclDay0.csv")
}





#Read the stored frequencies in stead
if (TRUE){#read the stored data
read.table("freqPatSiteInclDay0.csv",sep=",",header=TRUE,row.names=1)->freqPatSite
read.table("freqPatTsInclDay0.csv",sep=",",header=TRUE,row.names=1)->freqPatTs
}

#which are the fourfold degenerate sites? make list of fourfoldsites
# kristof: geef all 3 posities waar een change niet uitmaakt (op basis van 1 en 2 pos)
if (TRUE){
ListFourFold<-c("gc","cg","gg","ct","cc","tc", "ac","gt")
firstsites<-seq(1,984,by=3); secondsites<-seq(2,984,by=3); 
firstandsecondpos<-sort(c(firstsites,secondsites)) ## kristof toegevoegd
fourfoldsites=c(); otherthirdpossites=c();
for (l in firstsites){
	if (length(grep(paste(consensusB[l:(l+1)],collapse=""),ListFourFold))>0){fourfoldsites<-c(fourfoldsites,l+2);}
	else(otherthirdpossites<-c(otherthirdpossites,l+2))
}}

#make vector of the type of sites 
TypeOfSite<-rep(0,984)
TypeOfSite[fourfoldsites]<-4
TypeOfSite[firstsites]<-2
TypeOfSite[secondsites]<-2
TypeOfSite[otherthirdpossites]<-3
#make sure that resistance sites in RT have a diff type of site
TypeOfSite[sort(c((RTImuts$pos*3)-2,(RTImuts$pos*3)-1,(RTImuts$pos*3)))+297]<-5


table(TypeOfSite)
TypeOfSite
2   3   4
656 206 122

table(TypeOfSite)
TypeOfSite
2   3   4
642  76 266
